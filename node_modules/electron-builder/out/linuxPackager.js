"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LinuxPackager = undefined;

var _path = _interopRequireWildcard(require("path"));

var _platformPackager;

function _load_platformPackager() {
    return _platformPackager = require("./platformPackager");
}

var _metadata;

function _load_metadata() {
    return _metadata = require("./metadata");
}

var _targetFactory;

function _load_targetFactory() {
    return _targetFactory = require("./targets/targetFactory");
}

var _LinuxTargetHelper;

function _load_LinuxTargetHelper() {
    return _LinuxTargetHelper = require("./targets/LinuxTargetHelper");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _sanitizeFilename;

function _load_sanitizeFilename() {
    return _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class LinuxPackager extends (_platformPackager || _load_platformPackager()).PlatformPackager {
    constructor(info) {
        super(info);
        let executableName = this.platformSpecificBuildOptions.executableName;
        this.executableName = (0, (_sanitizeFilename || _load_sanitizeFilename()).default)(executableName == null ? this.appInfo.name : executableName);
    }
    normalizePlatformSpecificBuildOptions(options) {
        if (options != null && options.description != null) {
            return options;
        } else {
            return Object.assign({
                description: this.info.appInfo.description
            }, options);
        }
    }
    createTargets(targets, mapper, cleanupTasks) {
        for (let name of targets) {
            if (name === (_targetFactory || _load_targetFactory()).DIR_TARGET) {
                continue;
            }
            let helper;
            const getHelper = () => {
                if (helper == null) {
                    helper = new (_LinuxTargetHelper || _load_LinuxTargetHelper()).LinuxTargetHelper(this);
                }
                return helper;
            };
            if (name === (_targetFactory || _load_targetFactory()).DEFAULT_TARGET || name === "appimage") {
                const targetClass = require("./targets/appImage").default;
                mapper("appimage", outDir => new targetClass(this, getHelper(), outDir));
            } else if (name === "snap") {
                const targetClass = require("./targets/snap").default;
                mapper("snap", outDir => new targetClass(this, getHelper(), outDir));
            } else if (name === "deb" || name === "rpm" || name === "sh" || name === "freebsd" || name === "pacman" || name === "apk" || name === "p5p") {
                const targetClass = require("./targets/fpm").default;
                mapper(name, outDir => new targetClass(name, this, getHelper(), outDir));
            } else {
                mapper(name, outDir => (0, (_targetFactory || _load_targetFactory()).createCommonTarget)(name, outDir, this));
            }
        }
    }
    get platform() {
        return (_metadata || _load_metadata()).Platform.LINUX;
    }
    postInitApp(appOutDir) {
        return (0, (_fsExtraP || _load_fsExtraP()).rename)(_path.join(appOutDir, "electron"), _path.join(appOutDir, this.executableName));
    }
}
exports.LinuxPackager = LinuxPackager; //# sourceMappingURL=linuxPackager.js.map