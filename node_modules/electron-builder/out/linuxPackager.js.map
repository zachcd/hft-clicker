{
  "version": 3,
  "file": "linuxPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/linuxPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as path from \"path\"\nimport { PlatformPackager, BuildInfo, Target } from \"./platformPackager\"\nimport { Platform } from \"./metadata\"\nimport FpmTarget from \"./targets/fpm\"\nimport { createCommonTarget, DEFAULT_TARGET, DIR_TARGET } from \"./targets/targetFactory\"\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\nimport AppImageTarget from \"./targets/appImage\"\nimport { rename } from \"fs-extra-p\"\nimport { LinuxBuildOptions } from \"./options/linuxOptions\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport SnapTarget from \"./targets/snap\"\n\nexport class LinuxPackager extends PlatformPackager<LinuxBuildOptions> {\n  readonly executableName: string\n\n  constructor(info: BuildInfo) {\n    super(info)\n\n    let executableName = this.platformSpecificBuildOptions.executableName\n    this.executableName = sanitizeFileName(executableName == null ? this.appInfo.name : executableName)\n  }\n\n  normalizePlatformSpecificBuildOptions(options: LinuxBuildOptions | n): LinuxBuildOptions {\n    if (options != null && options.description != null) {\n      return options\n    }\n    else {\n      return Object.assign({\n        description: this.info.appInfo.description,\n      }, options)\n    }\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    for (let name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      let helper: LinuxTargetHelper | null\n      const getHelper = () => {\n        if (helper == null) {\n          helper = new LinuxTargetHelper(this)\n        }\n        return helper\n      }\n\n      if (name === DEFAULT_TARGET || name === \"appimage\") {\n        const targetClass: typeof AppImageTarget = require(\"./targets/appImage\").default\n        mapper(\"appimage\", outDir => new targetClass(this, getHelper(), outDir))\n      }\n      else if (name === \"snap\") {\n        const targetClass: typeof SnapTarget = require(\"./targets/snap\").default\n        mapper(\"snap\", outDir => new targetClass(this, getHelper(), outDir))\n      }\n      else if (name === \"deb\" || name === \"rpm\" || name === \"sh\" || name === \"freebsd\" || name === \"pacman\" || name === \"apk\" || name === \"p5p\") {\n        const targetClass: typeof FpmTarget = require(\"./targets/fpm\").default\n        mapper(name, outDir => new targetClass(name, this,  getHelper(), outDir))\n      }\n      else {\n        mapper(name, outDir => createCommonTarget(name, outDir, this))\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.LINUX\n  }\n\n  protected postInitApp(appOutDir: string): Promise<any> {\n    return rename(path.join(appOutDir, \"electron\"), path.join(appOutDir, this.executableName))\n  }\n}"
  ]
}
