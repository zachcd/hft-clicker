{
  "version": 3,
  "file": "tmp.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/tmp.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { tmpdir } from \"os\"\nimport { remove, mkdirs, removeSync } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { getTempName } from \"./util\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { warn } from \"./log\"\n\nconst mkdtemp: any | null = require(\"fs-extra-p\").mkdtemp\n\nprocess.setMaxListeners(30)\n\nexport class TmpDir {\n  private tmpFileCounter = 0\n  private tempDirectoryPromise: BluebirdPromise<string>\n\n  private dir: string | null\n\n  getTempFile(suffix: string): BluebirdPromise<string> {\n    if (this.tempDirectoryPromise == null) {\n      let promise: BluebirdPromise<string>\n      if (mkdtemp == null) {\n        const dir = path.join(tmpdir(), getTempName(\"electron-builder\"))\n        promise = mkdirs(dir, {mode: 448}).thenReturn(dir)\n      }\n      else {\n        promise = mkdtemp(`${path.join(process.env.TEST_DIR || tmpdir(), \"electron-builder\")}-`)\n      }\n\n      this.tempDirectoryPromise = promise\n        .then(dir => {\n          this.dir = dir\n          const cleanup = () => {\n            if (this.dir == null) {\n              return\n            }\n\n            this.dir = null\n            try {\n              removeSync(dir)\n            }\n            catch (e) {\n              if (e.code !== \"EPERM\") {\n                warn(`Cannot delete temporary dir \"${dir}\": ${(e.stack || e).toString()}`)\n              }\n            }\n          }\n          process.on(\"exit\", cleanup)\n          process.on(\"uncaughtException\", cleanup)\n          process.on(\"SIGINT\", cleanup)\n          return dir\n        })\n    }\n\n    return this.tempDirectoryPromise\n      .then(it => path.join(it, `t-${process.pid.toString(16)}-${(this.tmpFileCounter++).toString(16)}${suffix.startsWith(\".\") ? suffix : `-${suffix}`}`))\n  }\n\n  cleanup(): Promise<any> {\n    const dir = this.dir\n    if (dir == null) {\n      return BluebirdPromise.resolve()\n    }\n\n    this.dir = null\n    return remove(dir)\n      .catch(e => {\n        if (e.code === \"EPERM\") {\n          this.dir = dir\n        }\n        else {\n          warn(`Cannot delete temporary dir \"${dir}\": ${(e.stack || e).toString()}`)\n        }\n      })\n  }\n}\n"
  ]
}
