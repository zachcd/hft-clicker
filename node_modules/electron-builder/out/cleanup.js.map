{
  "version": 3,
  "file": "cleanup.js",
  "sourceRoot": "",
  "sources": [
    "../src/cleanup.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;sEAOA,AAAK;AACH,cAAM,AAAG,MAAG,AAAI,MAAC,AAAI,KAAC,AAAiB,AAAE,kDAAE,AAAK,AAAC;AACjD,YAAI,AAAK,QAAoB,AAAI;AACjC,YAAI,AAAC;AACH,AAAK,oBAAG,MAAM,AAAO,6CAAC,AAAG,AAAC,AAC5B;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,AAAC,AACT;AAAC;AACD,AAAM,AACR;AAAC;AAED,gEAAsB,AAAG,IAAC,AAAK,AAA2C;AAApE,AAAe,+EAAsD,AAAK,WAAE,AAAE;AAClF,oBAAI,AAAI,OAAiB,AAAI;AAC7B,sBAAM,AAAQ,WAAG,AAAI,MAAC,AAAI,KAAC,AAAG,KAAE,AAAE,AAAC;AACnC,oBAAI,AAAC;AACH,AAAI,2BAAG,MAAM,AAAK,2CAAC,AAAQ,AAAC,AAC9B;AACA,kBAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,wBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,8BAAM,AAAC,AACT;AAAC;AACD,AAAM,AACR;AAAC;AAED,AAAE,AAAC,oBAAC,CAAC,AAAK,KAAC,AAAW,AAAE,iBAAI,AAAC,EAAC,MAAM,AAAc,eAAC,AAAQ,AAAC,AAAC,AAAC,YAAC,AAAC;AAC9D,AAAO,4BAAC,AAAG,AAAC,sBAAiB,AAAQ,QAAE,AAAC;AACxC,0BAAM,AAAM,4CAAC,AAAQ,AAAC,AACxB;AAAC,AACH;AAAC,AAAC,AAAC;;;;;;AAEH,cAAM,AAAe,kDAAC,AAAG,IAAC,AAAK,AAAE,AAAM,AAAC,AAC1C;AAAC;;;;;;;;uEAED,AAAK,WAAyB,AAAW;AACvC,YAAI,AAAC;AACH,kBAAM,AAAQ,WAAG,AAAQ,UAAC,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAG,KAAE,AAAW,AAAC,cAAE,AAAM,AAAC,UAAE,AAAE,AAAC;AAClF,AAAE,AAAC,gBAAC,CAAC,AAAK,MAAC,AAAQ,AAAC,aAAK,AAAI,KAAC,AAAG,AAAE,QAAG,AAAQ,AAAC,AAAG,QAA1B,GAA2B,AAAO,UAAG,AAAC,AAAC,AAAC,GAAC,AAAC;AAChE,AAAM,uBAAC,AAAI,AACb;AAAC,AACH;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,gBAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,AAAC,UAAC,AAAC;AACxB,sBAAM,AAAC,AACT;AAAC,AACH;AAAC;AAED,AAAM,eAAC,AAAK,AACd;AAAC;;;;;;;;;AAtDD,AAAO,AAAE,AAAO,AAAE,AAAK,AAAS,AAAM,AAAE,AAAQ,AAAE,AAAM,AAAY,AACpE,AAAO,AAAe,AAAM,AAAgB;;;;AAC5C,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAa;;;;;;;;AAqD/C,AAAI,AAAE",
  "sourcesContent": [
    "#! /usr/bin/env node\n\nimport { readdir, lstat, Stats, remove, readFile } from \"fs-extra-p\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { getCacheDirectory } from \"./util/util\"\n\nasync function main() {\n  const dir = path.join(getCacheDirectory(), \"fpm\")\n  let items: string[] | null = null\n  try {\n    items = await readdir(dir)\n  }\n  catch (e) {\n    if (e.code !== \"ENOENT\") {\n      throw e\n    }\n    return\n  }\n\n  await BluebirdPromise.map(items, <(item: string) => BluebirdPromise<any>> (async (it) => {\n    let stat: Stats | null = null\n    const itemPath = path.join(dir, it)\n    try {\n      stat = await lstat(itemPath)\n    }\n    catch (e) {\n      if (e.code !== \"ENOENT\") {\n        throw e\n      }\n      return\n    }\n\n    if (!stat!.isDirectory() || !(await isRecentlyUsed(itemPath))) {\n      console.log(`remove unused ${itemPath}`)\n      await remove(itemPath)\n    }\n  }))\n\n  await BluebirdPromise.map(items, remove)\n}\n\nasync function isRecentlyUsed(dir: string) {\n  try {\n    const lastUsed = parseInt(await readFile(path.join(dir, \".lastUsed\"), \"utf8\"), 10)\n    if (!isNaN(lastUsed) && (Date.now() - lastUsed) < (3600000 * 2)) {\n      return true\n    }\n  }\n  catch (e) {\n    if (e.code !== \"ENOENT\") {\n      throw e\n    }\n  }\n\n  return false\n}\n\nmain()"
  ]
}
