"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

var _platformPackager;

function _load_platformPackager() {
    return _platformPackager = require("../platformPackager");
}

var _metadata;

function _load_metadata() {
    return _metadata = require("../metadata");
}

var _log;

function _load_log() {
    return _log = require("../util/log");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _path = _interopRequireWildcard(require("path"));

var _jsYaml;

function _load_jsYaml() {
    return _jsYaml = require("js-yaml");
}

var _util;

function _load_util() {
    return _util = require("../util/util");
}

var _os;

function _load_os() {
    return _os = require("os");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

class SnapTarget extends (_platformPackager || _load_platformPackager()).Target {
    constructor(packager, helper, outDir) {
        super("snap");
        this.packager = packager;
        this.helper = helper;
        this.outDir = outDir;
        this.options = Object.assign({}, this.packager.platformSpecificBuildOptions, this.packager.devMetadata.build[this.name]);
        // we add X-AppImage-BuildId to ensure that new desktop file will be installed
        this.desktopEntry = helper.computeDesktopEntry(this.options, "AppRun");
    }
    build(appOutDir, arch) {
        var _this = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            (0, (_log || _load_log()).log)(`Building Snap for arch ${ (_metadata || _load_metadata()).Arch[arch] }`);
            const packager = _this.packager;
            const appInfo = packager.appInfo;
            const options = _this.options;
            const resultFile = _path.join(_this.outDir, packager.generateName("snap", arch, true));
            yield (0, (_util || _load_util()).unlinkIfExists)(resultFile);
            const snap = {};
            snap.name = appInfo.name.toLowerCase();
            snap.version = appInfo.version;
            snap.summary = options.summary || appInfo.productName;
            snap.description = _this.helper.getDescription(options);
            snap.confinement = options.confinement || "strict";
            snap.grade = options.grade || "stable";
            if (options.assumes != null) {
                if (!Array.isArray(options.assumes)) {
                    throw new Error("snap.assumes must be an array of strings");
                }
                snap.assumes = options.assumes;
            }
            const snapDir = `${ appOutDir }-snap`;
            snap.apps = {
                [snap.name]: {
                    command: `desktop-launch $SNAP/${ packager.executableName }`,
                    plugs: ["browser-support", "network", "unity7", "gsettings", "pulseaudio", "opengl"]
                }
            };
            const isUseDocker = process.platform !== "linux";
            snap.parts = {
                "deps": {
                    plugin: "nil",
                    "stage-packages": ["libgconf-2-4", "libnss3", "libxss1", "fontconfig-config"]
                },
                "desktop-integration": {
                    plugin: "nil",
                    "stage-packages": ["libappindicator1", "libdbusmenu-glib4", "libnotify4", "libunity9"]
                },
                app: {
                    plugin: "dump",
                    source: isUseDocker ? `/out/${ _path.basename(snapDir) }` : appOutDir,
                    filesets: {
                        app: [`${ appOutDir }/*`]
                    },
                    after: ["desktop-glib-only"]
                }
            };
            const snapcraft = _path.join(snapDir, "snapcraft.yaml");
            yield (0, (_fsExtraP || _load_fsExtraP()).emptyDir)(snapDir);
            yield (0, (_fsExtraP || _load_fsExtraP()).writeFile)(snapcraft, (0, (_jsYaml || _load_jsYaml()).safeDump)(snap));
            //     await writeFile(path.join(snapDir, "wrapper"), `
            // #!/bin/bash
            // unset XDG_CONFIG_DIRS
            // exec $SNAP/${packager.executableName}
            // `)
            // const args = ["snapcraft", path.relative(snapDir)]
            // snap /out/${path.basename(snapDir)} --output /out/${path.basename(resultFile)}
            if (isUseDocker) {
                yield (0, (_util || _load_util()).spawn)("docker", ["run", "--rm", "-v", `${ packager.info.projectDir }:/project`, "-v", `${ (0, (_os || _load_os()).homedir)() }/.electron:/root/.electron`,
                // dist dir can be outside of project dir
                "-v", `${ _this.outDir }:/out`, "-w", `/out/${ _path.basename(snapDir) }`, "electronuserland/electron-builder:latest", "/bin/bash", "-c", `env && snapcraft snap`], {
                    cwd: packager.info.projectDir
                });
            } else {
                yield (0, (_util || _load_util()).spawn)("snapcraft", ["snap"], {
                    cwd: snapDir
                });
            }
            packager.dispatchArtifactCreated(resultFile, packager.generateName("snap", arch, true));
        })();
    }
}
exports.default = SnapTarget; //# sourceMappingURL=snap.js.map